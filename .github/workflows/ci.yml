name: Profiles CI Workflow
on:
  workflow_dispatch:

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      mysql:
        # Docker Hub image (also with version)
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE:  profiles_ci_db
        ## map the "external" 33306 port with the "internal" 3306
        ports:
          - 33306:3306
        # Set health checks to wait until mysql database has started (it takes some seconds to start)
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        operating-system: [ubuntu-latest]
        php-versions: [ '8.0' ]
        dependency-stability: [ 'prefer-none' ]

    name: P${{ matrix.php-versions }} - L${{ matrix.laravel }} - ${{ matrix.dependency-stability }} - ${{ matrix.operating-system}}

    steps:
    - uses: actions/checkout@v2
    - name: Install PHP versions
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
    - name: Get Composer Cache Directory 2
      id: composer-cache
      run: |
        echo "::set-output name=dir::$(composer config cache-files-dir)"
    - uses: actions/cache@v2
      id: actions-cache
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-
    - name: Cache PHP dependencies
      uses: actions/cache@v2
      id: vendor-cache
      with:
        path: vendor
        key: ${{ runner.OS }}-build-${{ hashFiles('**/composer.lock') }}
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.ci', '.env');"
    - name: Install Dependencies
      if: steps.vendor-cache.outputs.cache-hit != 'true'
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Update Dependencies with latest stable
      if: matrix.dependency-stability == 'prefer-stable'
      run: composer update --prefer-stable
    - name: Update Dependencies with lowest stable
      if: matrix.dependency-stability == 'prefer-lowest'
      run: composer update --prefer-stable --prefer-lowest

    - name: Generate key
      run: php artisan key:generate
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    - name: Link Storage
      run: php artisan storage:link
    - name: Run Migrations

      env:
        DB_CONNECTION: mysql
        DB_DATABASE: profiles_ci_db
        DB_PORT: 33306
        DB_USER: root

      run: php artisan migrate

    - name: Show dir
      run: pwd
    - name: PHP Version
      run: php --version

    # PHPUnit tests
    - name: Execute tests (Unit and Feature tests) via PHPUnit

      env:
        DB_CONNECTION: mysql
        DB_DATABASE: profiles_ci_db
        DB_PORT: 33306
        DB_USER: root

      run: vendor/bin/phpunit --testdox

    # Security checks
    - uses: symfonycorp/security-checker-action@v2

    # Psalm static analysis
    - name: Execute Code Static Analysis (PSALM)
      run: |
        vendor/bin/psalm